<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmWizard</name>
    </assembly>
    <members>
        <member name="T:MvvmWizard.Classes.BindableBase">
            <summary>
            The bindable base.
            </summary>
        </member>
        <member name="E:MvvmWizard.Classes.BindableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:MvvmWizard.Classes.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">
            Type of the property.
            </typeparam>
            <param name="storage">
            Reference to a property with both getter and setter.
            </param>
            <param name="value">
            Desired value for the property.
            </param>
            <param name="propertyName">
            Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.
            </param>
            <returns>
            True if the value was changed, false if the existing value matched the
            desired value.
            </returns>
        </member>
        <member name="M:MvvmWizard.Classes.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">
            Name of the property used to notify listeners.
            </param>
        </member>
        <member name="T:MvvmWizard.Classes.TransitionContext">
            <summary>
            The transition context.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.SharedContext">
            <summary>
            Gets the shared context.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.StepIndices">
            <summary>
            Gets all the step indices.
            uses "x:Name" of the <see cref="T:MvvmWizard.Controls.Wizard"/> element to associate index with the constant.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.TransitedFromStep">
            <summary>
            Gets the index of the step is being navigated away from.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.TransitToStep">
            <summary>
            Gets or sets index of the step has been navigated to.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.AbortTransition">
            <summary>
            Gets or sets a value indicating whether transition should be aborted.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionContext.IsSkipAction">
            <summary>
            Gets a value indicating whether current transition was invoked by <see cref="P:MvvmWizard.Classes.TransitionController.SkipStepCommand"/>.
            </summary>
        </member>
        <member name="T:MvvmWizard.Classes.SimpleCommand">
            <summary>
            The simple command.
            </summary>
        </member>
        <member name="F:MvvmWizard.Classes.SimpleCommand.executeMethod">
            <summary>
            The execute delegate.
            </summary>
        </member>
        <member name="F:MvvmWizard.Classes.SimpleCommand.canExecuteMethod">
            <summary>
            The can execute delegate.
            </summary>
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmWizard.Classes.SimpleCommand"/> class.
            </summary>
            <param name="executeMethod">
            The <see cref="T:System.Action" /> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> is called.
            </param>
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmWizard.Classes.SimpleCommand"/> class.
            </summary>  
            <param name="executeMethod">
            The <see cref="T:System.Action" /> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /> is called.
            </param>
            <param name="canExecuteMethod">
            The <see cref="T:System.Func`1" /> to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /> is called
            </param>
        </member>
        <member name="E:MvvmWizard.Classes.SimpleCommand.CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.CanExecute">
            <summary>
            Gets a value indicating whether current command can be executed.
            </summary>
            <returns>
            <see langword="true" /> if command can be executed, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.Execute">
            <summary>
            Executes the command.
            </summary>
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MvvmWizard.Classes.SimpleCommand.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:MvvmWizard.Classes.StepViewModelBase">
            <summary>
            The step view model base.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.StepViewModelBase.TransitionController">
            <inheritdoc />
        </member>
        <member name="M:MvvmWizard.Classes.StepViewModelBase.OnTransitedTo(MvvmWizard.Classes.TransitionContext)">
            <inheritdoc />
        </member>
        <member name="M:MvvmWizard.Classes.StepViewModelBase.OnTransitedFrom(MvvmWizard.Classes.TransitionContext)">
            <inheritdoc />
        </member>
        <member name="T:MvvmWizard.Classes.TransitionController">
            <summary>
            The transition controller.
            </summary>
        </member>
        <member name="M:MvvmWizard.Classes.TransitionController.#ctor(System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmWizard.Classes.TransitionController"/> class.
            </summary>
            <param name="previousStepMethod">
            The show previous step method.
            </param>
            <param name="nextStepMethod">
            The show next step method.
            </param>
            <param name="skipStepMethod">
            The skip step method.
            </param>
            <param name="finishMethod">
            The close/finish wizard method.
            </param>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionController.PreviousStepCommand">
            <summary>
            Gets the command, which performs transition to the previous step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionController.NextStepCommand">
            <summary>
            Gets the command, which performs transition to the next step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionController.SkipStepCommand">
            <summary>
            Gets the command, which skips the step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.TransitionController.FinishCommand">
            <summary>
            Gets the command, which closes wizard.
            </summary>
        </member>
        <member name="T:MvvmWizard.Classes.WizardSettings">
            <summary>
            The wizard settings.
            </summary>
        </member>
        <member name="F:MvvmWizard.Classes.WizardSettings.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:MvvmWizard.Classes.WizardSettings.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MvvmWizard.Classes.WizardSettings"/> class from being created.
            </summary>
        </member>
        <member name="P:MvvmWizard.Classes.WizardSettings.ViewResolver">
            <summary>
            Gets or sets the view resolver (DI container).
            </summary>
            <example>
            WizardSettings.Instance.ViewResolver = type => unityContainer.Resolve(type);
            </example>
        </member>
        <member name="T:MvvmWizard.Controls.Wizard">
            <summary>
            The wizard control.
            </summary>
            <summary>
            The wizard.
            </summary>
            <summary>
            The wizard.
            </summary>
        </member>
        <member name="F:MvvmWizard.Controls.Wizard.DefaultForwardTransitionAnimation">
            <summary>
            The default "Forward" transition animation.
            </summary>
        </member>
        <member name="F:MvvmWizard.Controls.Wizard.DefaultBackwardTransitionAnimation">
            <summary>
            The default "Backward" transition animation.
            </summary>
        </member>
        <member name="F:MvvmWizard.Controls.Wizard.sharedContext">
            <summary>
            The shared context.
            </summary>
        </member>
        <member name="F:MvvmWizard.Controls.Wizard.isTransiting">
            <summary>
            Backing field for the <see cref="P:MvvmWizard.Controls.Wizard.IsTransiting"/>.
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MvvmWizard.Controls.Wizard"/> class.
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmWizard.Controls.Wizard"/> class.
            </summary>
        </member>
        <member name="E:MvvmWizard.Controls.Wizard.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.FinishCommand">
            <summary>
            Gets or sets the close/finish command.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.IsTransitionAnimationEnabled">
            <summary>
            Gets or sets a value indicating whether transition animation is enabled.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.UseCircularNavigation">
            <summary>
            Gets or sets a value indicating whether circular navigation should be used.
            i.e. Last Step -> Next Step will be First Step.
                 First Step -> Previous step will be Last Step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.NavigationBlockMinHeight">
            <summary>
            Gets or sets the navigation block (one with buttons and summary) minimum height.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.ForwardTransitionAnimation">
            <summary>
            Gets or sets the "Forward" transition animation.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.BackwardTransitionAnimation">
            <summary>
            Gets or sets the "Backward" transition animation.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.TransitionController">
            <summary>
            Gets the transition controller.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.CurrentStep">
            <summary>
            Gets the current step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.CurrentStepIndex">
            <summary>
            Gets the index of the current step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.FirstStepIndex">
            <summary>
            Gets the index of the first step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.LastStepIndex">
            <summary>
            Gets the index of the last step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.IsFirstStep">
            <summary>
            Gets a value indicating whether current step is the first in the queue.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.IsLastStep">
            <summary>
            Gets a value indicating whether current step is the last in the queue.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.Wizard.IsTransiting">
            <summary>
            Gets or sets a value indicating whether transition is in process.
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.TryTransitTo(System.Int32,System.Boolean)">
            <summary>
            The <see cref="M:MvvmWizard.Controls.Wizard.TransitTo(System.Int32,System.Boolean)"/> wrapped into Try/Finally.
            </summary>
            <param name="transitToIndex">
            The transit to index.
            </param>
            <param name="skippingStep">
            The skipping step.
            </param>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:MvvmWizard.Controls.Wizard.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when control gets loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event args.
            </param>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.ShowNextStep(System.Boolean)">
            <summary>
            Shows/goes to next step.
            </summary>
            <param name="skippingStep">
            The skipping step.
            </param>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.ShowPreviousStep">
            <summary>
            Shows/goes to previous steps
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.Wizard.TransitTo(System.Int32,System.Boolean)">
            <summary>
            Transits to the next/given step.
            </summary>
            <param name="transitToIndex">
            The transitToIndex.
            </param>
            <param name="skippingStep">
            The skipping step.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:MvvmWizard.Controls.WizardStep">
            <summary>
            The wizard step.
            </summary>
            <summary>
            The wizard step.
            </summary>
            <summary>
            The wizard step.
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.WizardStep.#cctor">
            <summary>
            Initializes static members of the <see cref="T:MvvmWizard.Controls.WizardStep"/> class.
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.WizardStep.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmWizard.Controls.WizardStep"/> class.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.WizardStep.IsProcessed">
            <summary>
            Gets or sets a value indicating whether item/step is processed.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.WizardStep.ParentTabControl">
            <summary>
            Gets the <see cref="T:MvvmWizard.Controls.Wizard"/> (parent).
            </summary>
        </member>
        <member name="M:MvvmWizard.Controls.WizardStep.TransitToCurrent">
            <summary>
            Transit to current step.
            </summary>
        </member>
        <member name="P:MvvmWizard.Controls.WizardStep.SummaryItemMouseOverBrush">
            <summary>
            Gets or sets the brush for the item when: <para></para>
              <see cref="P:MvvmWizard.Controls.WizardStep.IsSelected"/> = <see langword="false" />
             AND
              <see cref="P:System.Windows.UIElement.IsMouseOver"/> = <see langword="true" />
            </summary>
        </member>
        <member name="T:MvvmWizard.Interfaces.ITransitionAware">
            <summary>
            The TransitionAware interface.
            </summary>
        </member>
        <member name="P:MvvmWizard.Interfaces.ITransitionAware.TransitionController">
            <summary>
            Gets or sets the transition controller.
            </summary>
        </member>
        <member name="M:MvvmWizard.Interfaces.ITransitionAware.OnTransitedTo(MvvmWizard.Classes.TransitionContext)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="transitionContext">
            The transition context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:MvvmWizard.Interfaces.ITransitionAware.OnTransitedFrom(MvvmWizard.Classes.TransitionContext)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="transitionContext">
            The transition context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
    </members>
</doc>
